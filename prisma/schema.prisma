// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Negocio {
  id               String            @id @default(uuid())
  usuarioId        String            @unique
  usuario          Usuario           @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  nombre           String
  slug             String            @unique
  categorias       NegocioCategory[]
  secciones        NegocioSection[]
  descripcion      String?
  ciudad           String
  departamento     String
  direccion        String? // Nuevo: Dirección legible
  urlGoogleMaps    String?
  latitud          Float?
  longitud         Float?
  horarios         Json?
  imagenes         String[]
  fotoPerfil       String?
  fotoPortada      String?
  sitioWeb         String?
  telefonoContacto String?
  Product          Product[]
  estado           EstadoNegocio     @default(activo)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  publicaciones Publicacion[] // Relación para reseñas y anuncios

  @@index([ciudad])
  @@index([departamento])
  @@index([estado])
  @@index([usuarioId])
}

enum EstadoNegocio {
  activo
  suspendido
  eliminado
}

model NegocioCategory {
  negocioId  String
  categoryId String
  negocio    Negocio  @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([negocioId, categoryId])
  @@index([categoryId])
}

model NegocioSection {
  negocioId String
  sectionId String
  negocio   Negocio @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  section   Section @relation("NegocioSection", fields: [sectionId], references: [id]) // ✅ se agregó el nombre
  prioridad Int     @default(0)

  @@unique([negocioId, sectionId])
  @@index([sectionId])
}

model Usuario {
  id              String        @id @default(uuid())
  nombre          String
  apellido        String
  username        String        @unique
  contraseña     String
  email           String        @unique
  ciudad          String
  departamento    String
  pais            String?       @default("Colombia")
  genero          Genero
  fechaNacimiento DateTime
  fotoPerfil      String?
  biografia       String?
  role            Role          @default(user)
  facebook        String?
  instagram       String?
  tiktok          String?
  youtube         String?
  twitter         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  ultimaActividad DateTime      @default(now())
  estado          EstadoUsuario @default(activo)
  emailVerified   DateTime?
  negocio         Negocio?      @relation // Relación uno-a-uno
  preferencias    String[]
  publicaciones   Publicacion[]
  interacciones   Interaccion[] @relation("UsuarioInteracciones")

  @@index([username])
  @@index([email])
  @@index([role])
}

enum EstadoUsuario {
  activo
  suspendido
  eliminado
}

enum Role {
  admin
  user
  navegante
  creador
  negocio
}

enum Genero {
  masculino
  femenino
  otro
}

model Product {
  id               String                   @id @default(uuid())
  nombre           String
  slug             String                   @unique
  descripcion      String
  descripcionCorta String?
  precio           Float
  currency         Currency                 @default(COP)
  prioridad        Int?
  status           ProductStatus            @default(disponible)
  etiquetaEspecial ProductEtiquetaEspecial? @default(ninguna)
  tags             String[]
  componentes      String[] // opcional: puede pasar a atributos
  imagenes         Image[]                  @relation("ProductImages")
  secciones        ProductSection[]
  disponibleDesde  DateTime?
  disponibleHasta  DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  negocioId        String
  categoryId       String

  negocio                   Negocio               @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  category                  Category              @relation(fields: [categoryId], references: [id])
  publicacionesRelacionadas PublicacionProducto[] // Sin @relation("ProductosEnPublicacion")

  @@index([negocioId]) // Para filtrar productos por usuario rápidamente
  @@index([categoryId]) // Mejora las consultas filtradas por categoría
  @@index([nombre])
  @@index([status])
  @@index([categoryId, status])
  @@index([etiquetaEspecial])
  @@index([negocioId, status])
}

enum ProductEtiquetaEspecial {
  mas_buscado
  mas_vendido
  novedad
  reciente
  promocion
  ultimos_dias
  ninguna
}

enum Currency {
  COP // Pesos colombianos
  USD // Dólar estadounidense
  EUR // Euro
  MXN // Peso mexicano
  ARS // Peso argentino
  BRL // Real brasileño
}

enum ProductStatus {
  disponible
  agotado
  oculto
  descontinuado
}

model Category {
  id        String    @id @default(uuid())
  nombre    String
  slug      String    @unique
  iconName  String? // Ícono opcional para UI
  secciones Section[]
  productos Product[] // Productos relacionados
  isActive  Boolean   @default(true) // ✅ AGREGAR ESTA LÍNEA

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  negocios  NegocioCategory[] // sin @relation (usa nombre implícito o explícito si lo necesitas)
}

model Image {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
}

model Section {
  id       String           @id @default(uuid())
  nombre   String
  slug     String           @unique
  iconName String? // Nuevo campo opcional para el nombre del ícono
  order    Int // Orden o prioridad
  isActive Boolean // Estado activo/inactivo
  products ProductSection[]
  negocios NegocioSection[] @relation("NegocioSection")

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([categoryId])
}

model ProductSection {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  prioridad Int     @default(0)

  @@unique([productId, sectionId]) // Añade esta línea si no está presente
}

// Apartado de publicaciones

model Publicacion {
  id                     String                @id @default(cuid())
  usuarioId              String
  usuario                Usuario               @relation(fields: [usuarioId], references: [id])
  negocioId              String? // Nuevo campo para asociar con Negocio
  negocio                Negocio?              @relation(fields: [negocioId], references: [id], onDelete: Cascade)
  tipo                   PublicacionTipo
  titulo                 String?
  descripcion            String?
  multimedia             Media[] // Cambiado a Media
  visibilidad            Visibilidad           @default(PUBLICA)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  productosEnPublicacion PublicacionProducto[]
  numLikes               Int                   @default(0)
  numComentarios         Int                   @default(0)
  numCompartidos         Int                   @default(0)
  interacciones          Interaccion[]         @relation("PublicacionInteracciones")

  @@index([tipo, visibilidad, createdAt])
  @@index([usuarioId, createdAt])
  @@index([negocioId, createdAt])
}

enum Visibilidad {
  PUBLICA
  PRIVADA
  AMIGOS // O cualquier otra opción relevante
}

model PublicacionProducto {
  id            String      @id @default(cuid())
  publicacionId String
  productoId    String
  publicacion   Publicacion @relation(fields: [publicacionId], references: [id], onDelete: Cascade)
  producto      Product     @relation(fields: [productoId], references: [id], onDelete: Cascade)
  orden         Int         @default(0)

  @@unique([publicacionId, productoId])
}

enum PublicacionTipo {
  VIDEO_HORIZONTAL
  VIDEO_VERTICAL
  CARRUSEL_IMAGENES
  PRODUCTO_DESTACADO
  MINI_GRID
  TESTIMONIO
}

model Media {
  id            String         @id @default(uuid())
  url           String         @db.VarChar(2048)
  tipo          MultimediaTipo
  formato       String?
  orden         Int            @default(0)
  publicacionId String
  publicacion   Publicacion?   @relation(fields: [publicacionId], references: [id], onDelete: Cascade)
}

enum MultimediaTipo {
  IMAGEN
  VIDEO
}

model Interaccion {
  id            String          @id @default(cuid())
  tipo          InteraccionTipo
  contenido     String?
  reaccionTipo  ReaccionTipo?
  usuarioId     String
  publicacionId String
  createdAt     DateTime        @default(now())

  usuario     Usuario     @relation("UsuarioInteracciones", fields: [usuarioId], references: [id])
  publicacion Publicacion @relation("PublicacionInteracciones", fields: [publicacionId], references: [id], onDelete: Cascade)
}

enum InteraccionTipo {
  COMENTARIO
  REACCION
  COMPARTIDO
}

enum ReaccionTipo {
  LIKE
  LOVE
  WOW
  SAD
  ANGRY
}
