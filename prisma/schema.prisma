generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model IndexLog {
  id        String   @id @default(uuid())
  url       String   @unique
  status    String
  response  Json
  createdAt DateTime @default(now())
}

model Product {
  id               String           @id @default(uuid())
  nombre           String
  precio           Float
  componentes    String[]
  descripcion      String
  descripcionCorta String?
  slug             String           @unique
  prioridad        Int?
  status           String           @default("available") // Campo para manejar el estado
  tags             String[]
  imagenes         Image[]          @relation("ProductImages")
  secciones        ProductSection[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orderItems       OrderItem[]      @relation("OrderItemToProduct") // Relación inversa con OrderItem

  articulos ArticuloProduct[] // Relación con artículos (tabla intermedia)
}

model Image {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation("ProductImages", fields: [productId], references: [id], onDelete: Cascade)
}

model Section {
  id       String           @id @default(uuid())
  nombre   String
  slug     String           @unique
  iconName String?          // Nuevo campo opcional para el nombre del ícono
  order    Int              // Orden o prioridad
  isActive Boolean          // Estado activo/inactivo
  products ProductSection[]
  articulos ArticuloSection[] // Relación con los artículos
}

model ProductSection {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  prioridad Int     @default(0)

  @@unique([productId, sectionId]) // Añade esta línea si no está presente
}

model Articulo {
  id               String            @id @default(cuid())
  slug             String            @unique
  titulo           String
  descripcion      String
  imagen           String
  imagenes         String[]
  fechaPublicacion DateTime          @default(now())
  autor            String
  orden            Int // Nuevo campo
  secciones        ArticuloSection[] // Relación con las secciones
  products         ArticuloProduct[] // Relación con productos (tabla intermedia)
  temas            TemaBlog[]        @relation("ArticuloTemas")
}

model ArticuloSection {
  id         String   @id @default(cuid())
  articuloId String
  articulo   Articulo @relation(fields: [articuloId], references: [id], onDelete: Cascade)
  sectionId  String
  section    Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model TemaBlog {
  id         String   @id @default(cuid())
  articuloId String
  articulo   Articulo @relation("ArticuloTemas", fields: [articuloId], references: [id], onDelete: Cascade) // 🔥 Relación inversa
  titulo     String
  imagen     String?
  parrafos   String[] @default([])

  @@unique([articuloId, titulo])
}


model ArticuloProduct {
  id         String   @id @default(cuid())
  articuloId String
  productId  String
  articulo   Articulo @relation(fields: [articuloId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([articuloId, productId])
}



model Order {
  id             String               @id @default(uuid())
  estado         OrderState           @default(RECIBIDA) // Enum para los estados
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  items          OrderItem[] // Relación con los productos de la orden
  datosDeEntrega DeliveryData?        @relation(fields: [deliveryDataId], references: [id], onDelete: Cascade)
  deliveryDataId String?              @unique // Debe ser único en una relación 1:1
  statusHistory  OrderStatusHistory[] // Relación con el historial de estados
}

enum OrderState {
  RECIBIDA  
  ENTREGADA
  PAGADA
  CANCELADA
  PREPARACION
}



model OrderItem {
  id         String   @id @default(uuid())
  cantidad   Int
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String?  // Producto opcional
  producto   Product? @relation("OrderItemToProduct", fields: [productId], references: [id])
  precio     Float
  comentario String?
}


model OrderStatusHistory {
  id            String   @id @default(uuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  previousState String? // Cambiado a nullable
  newState      String
  comment       String?
  createdAt     DateTime @default(now())
}

model DeliveryData {
  id                 String    @id @default(uuid())
  senderName         String
  senderPhone        String
  recipientName      String?
  recipientPhone     String
  deliveryAddress    String
  occasion           String?
  dedicationMessage  String?
  deliveryDate       DateTime?
  deliveryTime       String?
  additionalComments String?
  order              Order?    @relation // Sin `fields` ni `references`
}


model Video {
  id        String   @id @default(uuid())
  url       String   @unique
  title     String
  description String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Imagegallery {
  id        String   @id @default(uuid())
  url       String   @unique
  title     String
  description String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id           String           @id @default(uuid())
  date         DateTime
  type         TransactionType
  description  String
  category     String
  amount       Decimal
  paymentMethod PaymentMethod
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum TransactionType {
  ingreso
  gasto
}

enum IncomeCategory {
  ventas
  ahorro
  otros
  propinas
  prestamos
}

enum ExpenseCategory {
  implementos
  materiales
  arriendo
  empleados
  servicios_publicos
  envios
  deudas
  mantenimiento
  impuestos
  otros
}

enum PaymentMethod {
  efectivo
  nequi
  daviplata
  cuenta_principal
  transferencias
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  role               Role                 @default(user)
  image              String?
  emailVerified DateTime? // Campo opcional para la verificación del correo
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}


enum Role {
  admin
  user
}

// prisma/schema.prisma
model Service {
  id          String   @id @default(uuid())       // ID único
  titulo      String                              // Título del servicio
  descripcion String                              // Descripción del servicio
  imagen      String                              // URL de la imagen
  slug        String   @unique                    // Slug único
  isActive    Boolean  @default(true)             // Estado (activo/inactivo)
  createdAt   DateTime @default(now())            // Fecha de creación
  updatedAt   DateTime @updatedAt                 // Fecha de actualización
}


model Testimonial {
  id          String   @id @default(uuid())
  imagen      String   // URL de la imagen
  titulo      String   // Título del testimonio (ej: nombre)
  descripcion String   // Descripción o frase motivadora
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Tarjeta {
  id          String   @id @default(uuid())
  titulo      String
  descripcion String
  imagen      String  // URL de la imagen
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model CarruselSection {
  id          String   @id @default(uuid())
  titulo      String
  descripcion String
  imagen      String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
